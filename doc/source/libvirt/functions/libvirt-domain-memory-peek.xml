<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.28 $ -->

<refentry xml:id="function.libvirt-domain-memory-peek" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>libvirt_domain_memory_peek</refname>
  <refpurpose>Read the contents of a domain's memory</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  
  <methodsynopsis>
   <type>string</type><methodname>libvirt_domain_memory_peek</methodname>
   <methodparam ><type>resource</type><parameter>domain</parameter></methodparam>
   <methodparam ><type>integer</type><parameter>start</parameter></methodparam>
   <methodparam ><type>integer</type><parameter>size</parameter></methodparam>
   <methodparam ><type>integer</type><parameter>flags</parameter></methodparam>
  </methodsynopsis>
  <para>
   This function allows you to read the contents of a domain's memory. The memory which is read is controlled by the 'start', 'size' and 'flags' parameters. If 'flags' is <constant>VIR_MEMORY_VIRTUAL</constant> then the 'start' and 'size' parameters are interpreted as virtual memory addresses for whichever task happens to be running on the domain at the moment. Although this sounds haphazard it is in fact what you want in order to read Linux kernel state, because it ensures that pointers in the kernel image can be interpreted coherently. 'buffer' is the return buffer and must be at least 'size' bytes. 'size' may be 0 to test if the call would succeed. NB. The remote driver imposes a 64K byte limit on 'size'. For your program to be able to work reliably over a remote connection you should split large requests to &lt;= 65536 bytes.
  </para>
  <para>
  This function is experimental and untested.
  </para>


 </refsect1>

 <refsect1 role="returnvalues">
  
  <!-- See also &return.success; -->
  <para>
   String containing requested memory
  </para>
 </refsect1>



</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
